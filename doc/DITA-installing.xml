<?xml version='1.0' encoding='UTF-8'?>
<!-- This file is part of the DITA Open Toolkit project hosted on 
     Sourceforge.net. See the accompanying license.txt file for 
     applicable licenses.-->
<!-- (c) Copyright IBM Corp. 2004, 2005 All Rights Reserved. -->

<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="installing">
  <title>Installing the DITA Toolkit</title>
  <shortdesc>This topic explains how to install the DITA Toolkit processing environment.</shortdesc>
  <taskbody>
    <prereq>
      <p>The DITA Toolkit functionality is based on W3C and other open processing environments. In particular, the pre-processing architecture requires Java, and the orchestration of processing pipeline events requires a Java-based make facility, for which Ant has been selected as a popular and well-supported tool. By using Java-based tools throughout the pipeline, managed by Ant, the DITA Toolkit has very high processing efficiency. The use of DITA Toolkit components outside of this environment is not recommend, and not supported by the project.</p>
      <p>These are the pre-requisite tools for the DITA Toolkit processing environment:</p>
      <dl>
        <dlentry>
          <dt>Java run time or development environment</dt>
          <dd>Provides the base environment for most tools used in this toolkit.</dd>
        </dlentry>
        <dlentry>
          <dt>XSLT 1.0 compliant transformation engine</dt>
          <dd>Provides the main transformation services in the toolkit.</dd>
        </dlentry>
        <dlentry>
          <dt>Ant build tool</dt>
          <dd>Provides the standard setup and sequencing of processing steps.</dd>
        </dlentry>
      </dl>
      <p>See <xref href="DITA-tested.xml">Tested platforms and tools</xref> for information about versions of these tools that have been tested successfully with this toolkit release.</p>
    </prereq>
    <context>The demo functions presume that you have installed optional build tools for some of the outputs, particularly PDf output, compiled HTML Help and compiled JavaHelp. If you do not have these tools at hand, the demo will still run, producing output directories that are ready to compile.</context>
    <steps>
      <step>
        <cmd>Use an unzip tool to extract the package into a location of your choice. </cmd>
      </step>
      <step><cmd>Set up your environment variable JAVA_HOME to your installation directory for JDK or JRE. If you&apos;re using Windows, you can use <q>set</q> command under command line to set up environment variable or directly add or modify the environment variable in System Property. If you&apos;re using bash shell under linux, you can use <q>export</q> command to set up environment variable.</cmd> <stepxmp>For example, we can set up JAVA_HOME like this in Windows command line.<pre>c:\pkg\DITA-OT1.0&gt;set JAVA_HOME=C:\ibm\Java142</pre>In linux bash shell, we can set up JAVA_HOME like this.<pre>[dita@localhost dita]$export JAVA_HOME=/usr/local/IBM/Java142</pre></stepxmp></step>
      <step>
        <cmd>Set up your XSLT processor and include the jar files needed into the CLASSPATH. For example, if you are using saxon, include saxon.jar into the CLASSPATH. If you are using xalan, include xalan.jar and xercesImpl.jar into the CLASSPATH.</cmd>
      </step>
      <step importance="optional">
        <cmd>If you have installed the Java Help Builder, set up your environment variable JHHOME to your installation directory for Java Help Builder</cmd>
      </step>
      <step importance="optional">
        <cmd>If you have installed FOP, set up your environment variable CLASSPATH to include the jar file of fop.jar, batik.jar and avalon.jar in FOP and your xslt processor</cmd>
      </step>
      <step importance="optional">
        <cmd>If you want to build HTML Help output, install Microsoft HTML Help Workshop to the default directory.</cmd>
      </step>
      <step>
        <cmd>Open a command shell to the intalled directory and issue <userinput>ant all</userinput> to run all the demos.</cmd>
        <info>You can issue <userinput>ant -projecthelp</userinput> to see the names of tasks that you can run individually, for example <userinput>ant samples.web</userinput>.</info>
      </step>
    </steps>
    <example>
      <title>Command line examples</title>
      <p>These are examples of command-line invocations of popular XSLT engines to test whether the XSLT engines has been successfully installed. If you passed these tests your XSLT engines works well with the toolkit.<dl>
          <dlentry>
            <dt>using Xalan-Java/ LotusXSL-Java:</dt>
            <dd>
              <pre scale="80">c:\pkg\DITA-OT1.0\doc&gt;java org.apache.xalan.xslt.Process -in DITA-readme.xml -xsl ..\xsl\pretty.xsl -out ..\DITA-readme.xml
</pre>
            </dd>
          </dlentry>
          <dlentry>
            <dt>using saxon:</dt>
            <dd>
              <pre scale="90">c:\pkg\DITA-OT1.0\doc&gt;java com.icl.saxon.StyleSheet DITA-readme.xml ..\xsl\pretty.xsl &gt; ..\DITA-readme.xml
</pre>
            </dd>
          </dlentry>
          <dlentry>
            <dt>using ant:</dt>
            <dd>
              <p>Invoke the all target of build.xml to see whether you can build the demo successfully. If you can pass this test, then all of the tools are installed correctly.</p>
              <pre>c:\pkg\DITA-OT1.0&gt;ant all</pre>
            </dd>
          </dlentry>
        </dl></p>
    </example>
  </taskbody>
</task>

